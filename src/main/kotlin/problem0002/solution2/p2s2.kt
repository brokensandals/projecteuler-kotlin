package problem0002.solution2

/*
Problem statement from https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

// The site (https://projecteuler.net/overview=002) points out that only each
// third number in the sequence is even. This code generates the whole sequence
// but only adds each third number to the sum, rather than using modulo to
// check for evenness.

fun sumOfEvenFib(upTo: Int): Int {
    var prev = 1
    var cur = 2
    var evenSum = 0
    var skip = 0
    while (cur <= upTo) {
        if (skip == 0) {
            evenSum += cur
            skip = 2
        } else {
            skip--
        }
        val next = cur + prev
        prev = cur
        cur = next
    }
    return evenSum
}